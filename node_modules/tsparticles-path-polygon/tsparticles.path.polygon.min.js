/*! For license information please see tsparticles.path.polygon.min.js.LICENSE.txt */
!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t(require("tsparticles-engine"));else if("function"==typeof define&&define.amd)define(["tsparticles-engine"],t);else{var i="object"==typeof exports?t(require("tsparticles-engine")):t(e.window);for(var o in i)("object"==typeof exports?exports:e)[o]=i[o]}}(this,(e=>(()=>{"use strict";var t={961:t=>{t.exports=e}},i={};function o(e){var s=i[e];if(void 0!==s)return s.exports;var r=i[e]={exports:{}};return t[e](r,r.exports,o),r.exports}o.d=(e,t)=>{for(var i in t)o.o(t,i)&&!o.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var s={};return(()=>{o.r(s),o.d(s,{loadPolygonPath:()=>r,polygonPathName:()=>i});var e=o(961);class t{constructor(){this.dirsList=[],this.options={sides:6,turnSteps:20,angle:30}}generate(t){return void 0===t.hexStep&&(t.hexStep=0),void 0===t.hexDirection&&(t.hexDirection=6===this.options.sides?2*(3*(0,e.getRandom)()|0):(0,e.getRandom)()*this.options.sides|0),void 0===t.hexSpeed&&(t.hexSpeed=t.velocity.length),t.hexStep%this.options.turnSteps==0&&(t.hexDirection=(0,e.getRandom)()>.5?(t.hexDirection+1)%this.options.sides:(t.hexDirection+this.options.sides-1)%this.options.sides),t.velocity.x=0,t.velocity.y=0,t.hexStep++,e.Vector.create(this.dirsList[t.hexDirection].x*t.hexSpeed,this.dirsList[t.hexDirection].y*t.hexSpeed)}init(e){var t;const i=e.actualOptions.particles.move.path.options;this.options.sides=i.sides>0?i.sides:6,this.options.angle=null!==(t=i.angle)&&void 0!==t?t:30,this.options.turnSteps=i.turnSteps>=0?i.turnSteps:20,this.createDirs()}reset(e){delete e.hexStep,delete e.hexDirection,delete e.hexSpeed}update(){}createDirs(){this.dirsList=[];for(let t=0;t<360;t+=360/this.options.sides){const i=this.options.angle+t;this.dirsList.push(e.Vector.create(Math.cos(i*Math.PI/180),Math.sin(i*Math.PI/180)))}}}const i="polygonPathGenerator";function r(e){e.addPathGenerator(i,new t)}})(),s})()));